[{"C:\\Users\\ASUS\\Desktop\\todo-react-app\\src\\index.js":"1","C:\\Users\\ASUS\\Desktop\\todo-react-app\\src\\App.js":"2"},{"size":197,"mtime":1609948594046,"results":"3","hashOfConfig":"4"},{"size":2650,"mtime":1610026387599,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1i8mt3v",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\ASUS\\Desktop\\todo-react-app\\src\\index.js",[],["12","13"],"C:\\Users\\ASUS\\Desktop\\todo-react-app\\src\\App.js",["14"],"import React, { useState, useEffect, useRef } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nfunction App() {\n  const firstLoad = useRef(true);\n//Initial states won't allow us to change the input value\n  const [inputValue,setInputValue] = useState('');\n  const [allTodos,setAllTodos] = useState([]);\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    if(inputValue.trim() === '')\n        return;\n//    console.log('test');\n//Spread operator ...  will fetch all previous todos first\n    setAllTodos([...allTodos, {\n//    We can have as many object values as we want.\n    text: inputValue,\n    id: uuidv4(),\n    }]);\n\n    setInputValue('');\n  }\n\n  const removeTodo = (id) =>{\n//    allTodos.delete((id)=> todo.id);\n    setAllTodos(allTodos.filter((todo) => todo.id !== id));\n  };\n\n//  use effect will be fired each time the array got new event\n  useEffect(() =>{\n      if (firstLoad.current){\n//        console.log('true');\n        firstLoad.current = false;\n      } else {\n//    for first render we don't need the local storage, but after first the local storage comes into play\n        localStorage.setItem(\"todoList\", JSON.stringify([...allTodos]));\n//        console.log('false');\n      }\n    },[allTodos]);\n\n//  This fires everytime as the array is left blank\n  useEffect(() => {\n//  here null condition is there because if we don't have localStorage instance then we can't get that and will throw the error in console.\n  if (localStorage.getItem(\"todoList\") !== null){\n        const newTodos = localStorage.getItem(\"todoList\");\n        setAllTodos(JSON.parse([...allTodos, newTodos]));\n    };\n  },[]);\n\n  return (\n    <div className=\"App\">\n        <div className=\"container\">\n            <form onSubmit={addTodo}>\n            <input autoFocus type=\"text\" placeholder=\"Enter Todo Task...\"\n            value={inputValue}\n//          Whatever we type get stored in the input value\n//          Our Todos are in array, so we use array mapping, every time we have array we need to use map\n//          If allTodos map has parenthesis then it processes whats inside it, unlike the curly braces we don't need array braces.\n//          In React its className in stead of class.\n            onChange={(e) => setInputValue(e.target.value) }/>\n            <button type=\"submit\">Add Todo</button>\n            </form>\n            {allTodos.map(todo => (\n                <div key={todo.id} className=\"todo\">\n                    <p>{todo.text}</p>\n                    <i onClick={()=> removeTodo(todo.id)} className=\"far fa-trash-alt\"></i>\n                </div>\n            ))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":50,"column":5,"nodeType":"21","endLine":50,"endColumn":7,"suggestions":"22"},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allTodos'. Either include it or remove the dependency array. You can also do a functional update 'setAllTodos(a => ...)' if you only need 'allTodos' in the 'setAllTodos' call.","ArrayExpression",["25"],"no-global-assign","no-unsafe-negation",{"desc":"26","fix":"27"},"Update the dependencies array to be: [allTodos]",{"range":"28","text":"29"},[1631,1633],"[allTodos]"]